# 5. Given a linked list, detect the loop inside the linked list.

# Time complexity to detect the loop inside the linked list: O(N), Iterating over the linked list.
# Auxiliary Space: O(1), As using 3 list to store 0,1 and 2 individually
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None


class LinkedList:
    def __init__(self):
        self.head = None

    def insertAtEnd(self, new_data):
        new_node = Node(new_data)
        if self.head is None:
            self.head = new_node
        else:
            temp = self.head
            while temp.next is not None:
                temp = temp.next
            temp.next = new_node

    def printLinkList(self):
        temp = self.head
        while temp:
            print(str(temp.data)+" -> ", end=" ")
            temp = temp.next

    def checkForLoop(self):
        tor = self.head
        hare = self.head

        while tor and hare and hare.next:
            tor = tor.next
            hare = hare.next.next

            if tor == hare:
                return False
        return False



##Driver Code---

LL1 = LinkedList()

LL1.insertAtEnd(10)
LL1.insertAtEnd(20)
LL1.insertAtEnd(30)
LL1.insertAtEnd(40)

# LL1.head.next.next = LL1.head

if LL1.checkForLoop():
    print("Loop exist")
else:
    print("Loop not exist")

