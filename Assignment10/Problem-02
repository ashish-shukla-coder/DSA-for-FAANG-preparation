# 2. Convert a singly linked list into a circular linked list


# Time complexity for singly linked list into a circular linked list : O(n), As we are Iterating over the linked list to go to the end of the LL of size n.
# Auxiliary Space for reversal of LL: O(1)

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None


class LinkedList:
    def __init__(self):
        self.head = None

    def insertAtEnd(self, new_data):
        new_node = Node(new_data)
        if self.head is None:
            self.head = new_node
        else:
            temp = self.head
            while temp.next is not None:
                temp = temp.next
            temp.next = new_node

    def convertSingleToCircular(self):
        temp = self.head
        while temp.next is not None:
            temp = temp.next
        temp.next = self.head

    def printLinkList(self):
        temp = self.head
        while temp:
            print(str(temp.data)+" ", end=" ")
            temp = temp.next

    def printCircularList(self):
        temp = self.head
        while temp.next is not self.head:
            print(str(temp.data)+" ", end=" ")
            temp = temp.next

##Driver code

LL1 = LinkedList()
LL1.insertAtEnd(1)
LL1.insertAtEnd(2)
LL1.insertAtEnd(3)
LL1.insertAtEnd(4)
LL1.printLinkList()
LL1.convertSingleToCircular()
print(" ---")
LL1.printCircularList()
