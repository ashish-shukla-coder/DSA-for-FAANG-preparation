# Sort 0s, 1s, and 2s in ascending order in Linked List
# 4. Given a linked list of N nodes where nodes can contain values 0s, 1s, and 2s only. The task is to segregate 0s, 1s, and 2s linked list such that all zeros segregate to the head side, 2s at the end of the linked list, and 1s in the mid of 0s and 2s. 
# Linked List Cycle



# Time complexity to sort LL: O(N), Iterating over the linked list.
# Auxiliary Space: O(N), As using 3 list to store 0,1 and 2 individually

class Node:
    def __init__(self, data=None, next=None):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    def insertAtEnd(self, new_data):
        new_node = Node(new_data)
        if self.head is None:
            self.head = new_node
        else:
            temp = self.head
            while temp.next is not None:
                temp = temp.next
            temp.next = new_node


    def printLinkList(self):
        temp = self.head
        while temp:
            print(str(temp.data)+" ", end=" ")
            temp = temp.next

    def sortLinkList(self):
        temp = self.head        
        oneLL = []
        twoLL = []
        threeLL = []
        while temp:
            if temp.data == 0:
                oneLL.append(temp.data)
                temp = temp.next
            elif temp.data == 1:
                twoLL.append(temp.data)
                temp = temp.next
            elif temp.data == 2:
                threeLL.append(temp.data)
                temp = temp.next 
        resultLL= oneLL + twoLL + threeLL        
             
        return resultLL

LL1 = LinkedList()
LL1.insertAtEnd(0)
LL1.insertAtEnd(2)
LL1.insertAtEnd(1)
LL1.insertAtEnd(0)
LL1.insertAtEnd(2)
LL1.printLinkList()

print()
reslt = LL1.sortLinkList()
print("Result after sorting LL-->",reslt)
