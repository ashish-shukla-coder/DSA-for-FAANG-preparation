# You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad. Suppose you have n version and you want to find out the first bad one, which causes all the following ones to be bad. Also, talk about the time complexity of your code.
# Test Cases:
# Input: [0,0,0,1,1,1,1,1,1]
# Output: 3
# Explanation: 0 indicates a good version and 1 indicates a bad version. So, the index of the first 1 is at 3. Thus, the output is 3


# def findFirstBadRelease(input_a):
#     n = len(input_a)
#     for i in range(n):
#         if input_a[i] == 1:
#             return i


###### Time complexity --> O(log n )
    
def findFirstBadReleaseUsingBS(input_a):
    left = 0
    right = len(input_a)

    while left < right:
        mid = left + (right - left)//2

        if input_a[mid] == 1 and input_a[mid-1]==0:
            return mid

        elif input_a[mid] == 1:
            right = right -1
    return -1

input_a = [0,0,0,1,1,1,1,1,1]
reslt_1 = findFirstBadReleaseUsingBS(input_a)
print("Index of first bad release",reslt_1)
