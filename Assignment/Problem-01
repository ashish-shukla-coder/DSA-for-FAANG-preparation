# Reversal of Linked List
# 1. Given a singly linked list, give me the reversal of the linked list.
# For example
# Input - 1 -> 2 -> 3 -> 4 -> 5
# Output - 5 -> 4 -> 3 -> 2 -> 1

# Time complexity for reversal of LL: O(n), As we are Iterating over the linked list of size n.
# Auxiliary Space for reversal of LL: O(1)

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None


class LinkedList:
    def __init__(self):
        self.head = None

    def insertAtEnd(self, new_data):
        new_node = Node(new_data)
        if self.head is None:
            self.head = new_node
        else:
            temp = self.head
            while temp.next is not None:
                temp = temp.next
            temp.next = new_node

    def reverseLinkList(self):
        currNode = self.head
        nextNode,prevNode = None,None
        while currNode is not None:
            nextNode = currNode.next
            currNode.next = prevNode
            prevNode = currNode
            currNode = nextNode 
        self.head = prevNode
    
    def printLinkList(self):
        temp = self.head
        while temp:
            # print("->", temp.data)
            print(str(temp.data)+" ", end=" ")
            temp = temp.next


## Driver code
LL1 = LinkedList()
LL1.insertAtEnd(1)
LL1.insertAtEnd(2)
LL1.insertAtEnd(3)
LL1.insertAtEnd(4)
LL1.insertAtEnd(5)

LL1.printLinkList()
print("\n")
LL1.reverseLinkList()
LL1.printLinkList()
